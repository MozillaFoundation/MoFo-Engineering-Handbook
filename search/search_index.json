{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Work in Progress This document is still being developed Welcome to the Mozilla Foundation engineering handbook . This is a living document. Our active repositories foundation.mozilla.org , the home of https://foundation.mozilla.org donate-wagtail , the home of https://donate.mozilla.org network-pulse , the home of https://mozillapulse.org network-pulse-api , the home of https://api.mozillapulse.org Tech stacks Backend technologies Frontend technologoes CI/CD Playbooks We use these playbooks as guides for planning and tracking work. General sprint playbook used to plan regular sprints Dedicated project playbook used to plan projects around specific work that will take up their own (one or more) sprint(s)","title":"Introduction"},{"location":"#introduction","text":"Work in Progress This document is still being developed Welcome to the Mozilla Foundation engineering handbook . This is a living document.","title":"Introduction"},{"location":"#our-active-repositories","text":"foundation.mozilla.org , the home of https://foundation.mozilla.org donate-wagtail , the home of https://donate.mozilla.org network-pulse , the home of https://mozillapulse.org network-pulse-api , the home of https://api.mozillapulse.org","title":"Our active repositories"},{"location":"#tech-stacks","text":"Backend technologies Frontend technologoes CI/CD","title":"Tech stacks"},{"location":"#playbooks","text":"We use these playbooks as guides for planning and tracking work. General sprint playbook used to plan regular sprints Dedicated project playbook used to plan projects around specific work that will take up their own (one or more) sprint(s)","title":"Playbooks"},{"location":"devops/certificate-monitoring/","text":"Monitoring for certificate expiration A simple mechanism has been put in place to give us daily checks on the expiration time of our certificates. Here's how to add a new check for a host: Using the credentials in the vault log into the healthchecks account Create a new check, give it a meaningful name and tags For a 30 day check, set the check period to two days and the grace period to twelve hours. For a 3 day check, set the period to one day and the grace period to 6 hours Go to the integrations page, and turn off notifications on Pagerduty if the check is for 30 days. Make note of the unique healthcheck endpoint that is generated. Go to the Heroku app (Ask Chris for access if required) Open up the Heroku Scheduler Add-on and create a new daily task. Fill in the variables in this command, given the nature of the check you set up: test $(node_modules/.bin/ssl-date-checker changecopyright.org -f json | jq '.expires') -gt $30_OR_3 && curl -fsS --retry 3 $HEALTHCHECK_ENDPOINT","title":"Certificate monitoring"},{"location":"devops/certificate-monitoring/#monitoring-for-certificate-expiration","text":"A simple mechanism has been put in place to give us daily checks on the expiration time of our certificates. Here's how to add a new check for a host: Using the credentials in the vault log into the healthchecks account Create a new check, give it a meaningful name and tags For a 30 day check, set the check period to two days and the grace period to twelve hours. For a 3 day check, set the period to one day and the grace period to 6 hours Go to the integrations page, and turn off notifications on Pagerduty if the check is for 30 days. Make note of the unique healthcheck endpoint that is generated. Go to the Heroku app (Ask Chris for access if required) Open up the Heroku Scheduler Add-on and create a new daily task. Fill in the variables in this command, given the nature of the check you set up: test $(node_modules/.bin/ssl-date-checker changecopyright.org -f json | jq '.expires') -gt $30_OR_3 && curl -fsS --retry 3 $HEALTHCHECK_ENDPOINT","title":"Monitoring for certificate expiration"},{"location":"devops/deployment-standards/","text":"Deployment Standards Who Anyone with permissions to merge code in one of our repos can deploy to staging and production. Master is automatically deployed to staging, but production requires doing a manual promote to prod . When You should never be afraid of deploying: things break and that's okay! If you never did a rollback and think you will need assistance to do it, avoid deploying when less people are around (end of a work day or after-hours, Fridays, or weekends)... Unless circumstances require it. For example, to fix a crash bug after-hours. Failed Deployments and Rollbacks If Heroku fails to build the app, it will not deploy it. However, if a runtime error is encountered and the app can't start up, a rollback should be performed. For static apps deployed on AWS S3 that break, revert the bad commit and re-deploy. Notifications Deployment notifications can be found for most apps in the #mofo-devops channel on the Mozilla Slack workspace","title":"Deployment Standards"},{"location":"devops/deployment-standards/#deployment-standards","text":"","title":"Deployment Standards"},{"location":"devops/deployment-standards/#who","text":"Anyone with permissions to merge code in one of our repos can deploy to staging and production. Master is automatically deployed to staging, but production requires doing a manual promote to prod .","title":"Who"},{"location":"devops/deployment-standards/#when","text":"You should never be afraid of deploying: things break and that's okay! If you never did a rollback and think you will need assistance to do it, avoid deploying when less people are around (end of a work day or after-hours, Fridays, or weekends)... Unless circumstances require it. For example, to fix a crash bug after-hours.","title":"When"},{"location":"devops/deployment-standards/#failed-deployments-and-rollbacks","text":"If Heroku fails to build the app, it will not deploy it. However, if a runtime error is encountered and the app can't start up, a rollback should be performed. For static apps deployed on AWS S3 that break, revert the bad commit and re-deploy.","title":"Failed Deployments and Rollbacks"},{"location":"devops/deployment-standards/#notifications","text":"Deployment notifications can be found for most apps in the #mofo-devops channel on the Mozilla Slack workspace","title":"Notifications"},{"location":"devops/go-live/","text":"Mozilla Foundation Go-Live Checklist Make use of this checklist when evaluating a new website or feature for secure practices. Note that all items may not apply to the code being deployed. [ ] Conduct an RRA [ ] Perform a Security Review [ ] Does user generated content get displayed in-browser safely? [ ] Does user generated content get stored in any way - is it done safely? [ ] Is PII handled according to Mozilla's Privacy Policy? [ ] If password information is stored, is it done using best practices? (bcrypt/scrypt + salt) [ ] Does the site implement recommended security headers for HTTP requests? (HSTS, XFO, CSP, XCTO, etc) [ ] Do POST/PUT/DELETE requests implement some form of Cross Site Request Forgery protection? [ ] Does it have dependencies with known security vulnerabilities? (nsp, OWASP dependency-check) [ ] Does the system/site have adequate automated testing? [ ] Is there a contributors.json file present in the source repository, does it provide contact information in the event of an emergency? [ ] If automatically deployed, who can trigger deploys? Should deployment permission be limited? (branch/merge protection) [ ] Data Storage [ ] Automatic Backups [ ] Not publicly accessible AND/OR Strong Access credentials [ ] [node] Is it using an up-to-date LTS version of node? [ ] Logs & Monitoring [ ] Does this app require uptime monitoring? (pingdom) [ ] Does this app need to be hooked into logentries [ ] Does this app require log analysis (for alerting devs of runtime errors)","title":"Mozilla Foundation Go-Live Checklist"},{"location":"devops/go-live/#mozilla-foundation-go-live-checklist","text":"Make use of this checklist when evaluating a new website or feature for secure practices. Note that all items may not apply to the code being deployed. [ ] Conduct an RRA [ ] Perform a Security Review [ ] Does user generated content get displayed in-browser safely? [ ] Does user generated content get stored in any way - is it done safely? [ ] Is PII handled according to Mozilla's Privacy Policy? [ ] If password information is stored, is it done using best practices? (bcrypt/scrypt + salt) [ ] Does the site implement recommended security headers for HTTP requests? (HSTS, XFO, CSP, XCTO, etc) [ ] Do POST/PUT/DELETE requests implement some form of Cross Site Request Forgery protection? [ ] Does it have dependencies with known security vulnerabilities? (nsp, OWASP dependency-check) [ ] Does the system/site have adequate automated testing? [ ] Is there a contributors.json file present in the source repository, does it provide contact information in the event of an emergency? [ ] If automatically deployed, who can trigger deploys? Should deployment permission be limited? (branch/merge protection) [ ] Data Storage [ ] Automatic Backups [ ] Not publicly accessible AND/OR Strong Access credentials [ ] [node] Is it using an up-to-date LTS version of node? [ ] Logs & Monitoring [ ] Does this app require uptime monitoring? (pingdom) [ ] Does this app need to be hooked into logentries [ ] Does this app require log analysis (for alerting devs of runtime errors)","title":"Mozilla Foundation Go-Live Checklist"},{"location":"devops/technology/","text":"When starting a new project, use the technologies listed on this page. In cases where your project might require something not listed here, file an issue to begin a discussion on the topic. Where possible, we develop apps for deployment on Heroku. Static sites will be hosted on S3 and served through CloudFront. Platforms/Languages Django 2.2 LTS (Python 3.x) NodeJS LTS (JavaScript) Developers' tooling Try to use Docker , pip-tools , and Invoke when setting up a new Python codebase: it helps standardise dev environments across projects. Preferred Add-ons Heroku Postgres Heroku Redis In most cases, if it's a Heroku Add-on and your app needs it, we can probably use it, but file an issue just to make sure. There are a few exceptions: 1. Logging - We have a separate account we can use for log aggregation and monitoring with Scalyr. 2. Pingdom - We have a pingdom account. 3. VictorOps - We use VictorOps to manage on-call alerts for applications. If the app requires any of the above three services, file an issue to get it set up! Continuous Integration Our CI of choice is Travis CI .","title":"Technology"},{"location":"devops/technology/#platformslanguages","text":"Django 2.2 LTS (Python 3.x) NodeJS LTS (JavaScript)","title":"Platforms/Languages"},{"location":"devops/technology/#developers-tooling","text":"Try to use Docker , pip-tools , and Invoke when setting up a new Python codebase: it helps standardise dev environments across projects.","title":"Developers' tooling"},{"location":"devops/technology/#preferred-add-ons","text":"Heroku Postgres Heroku Redis In most cases, if it's a Heroku Add-on and your app needs it, we can probably use it, but file an issue just to make sure. There are a few exceptions: 1. Logging - We have a separate account we can use for log aggregation and monitoring with Scalyr. 2. Pingdom - We have a pingdom account. 3. VictorOps - We use VictorOps to manage on-call alerts for applications. If the app requires any of the above three services, file an issue to get it set up!","title":"Preferred Add-ons"},{"location":"devops/technology/#continuous-integration","text":"Our CI of choice is Travis CI .","title":"Continuous Integration"},{"location":"devops/zenhub/","text":"Zenhub We use Zenhub to bring some extra project management features to GitHub Issues. Installing Zenhub Zenhub is available as an addon for Firefox and an Extension for Google Chrome. It's available for download from their homepage Boards Boards are great for organizing, prioritizing and tracking issues in one or many milestones, across one or many repositories. The board organizes issues into pipelines (I.E. Triage, TODO, In Progress, In Review, Done) to help visualize the status of issues being displayed. Burndown Chart The burndown chart helps visualize your teams cadence over the course of a heartbeat. Each issue in a heartbeat can be assigned a numeric \"estimate\" value, which is a measure of the relative difficulty of the work. The burndown chart uses this information to graph the total amount of work over time.","title":"Zenhub"},{"location":"devops/zenhub/#zenhub","text":"We use Zenhub to bring some extra project management features to GitHub Issues.","title":"Zenhub"},{"location":"devops/zenhub/#installing-zenhub","text":"Zenhub is available as an addon for Firefox and an Extension for Google Chrome. It's available for download from their homepage","title":"Installing Zenhub"},{"location":"devops/zenhub/#boards","text":"Boards are great for organizing, prioritizing and tracking issues in one or many milestones, across one or many repositories. The board organizes issues into pipelines (I.E. Triage, TODO, In Progress, In Review, Done) to help visualize the status of issues being displayed.","title":"Boards"},{"location":"devops/zenhub/#burndown-chart","text":"The burndown chart helps visualize your teams cadence over the course of a heartbeat. Each issue in a heartbeat can be assigned a numeric \"estimate\" value, which is a measure of the relative difficulty of the work. The burndown chart uses this information to graph the total amount of work over time.","title":"Burndown Chart"},{"location":"devops/aws/","text":"Amazon Web Services This folder contains documentation for how we use different AWS services as part of usual workflows in deploying or configuring applications/websites. Learn How To Deploy an application with S3 and CloudFront Deploy an application with Heroku and CloudFront Where do AWS resources go? In general, put create new resources in the mofo-projects account. The exception to this rule is if the new resource needs to be in the legacy account (mofo-everything) to access an existing resource in that account (i.e. IAM stored certificates in mofo-everything are only available to resources in that account) Useful Tools AWS CLI Interface with your AWS resources using a terminal emulator! aws-shell Interactive shell for working with AWS. Autocomplete commands and resources, inline documentation. What more could you want. Assume AWS Role A helper script for assuming new AWS Roles for when working with multiple accounts. Logentries Log aggregation service. Lets you view, search and analyze server logs in real time. Use for debugging issues in staging and production.","title":"Amazon Web Services"},{"location":"devops/aws/#amazon-web-services","text":"This folder contains documentation for how we use different AWS services as part of usual workflows in deploying or configuring applications/websites.","title":"Amazon Web Services"},{"location":"devops/aws/#learn-how-to","text":"Deploy an application with S3 and CloudFront Deploy an application with Heroku and CloudFront","title":"Learn How To"},{"location":"devops/aws/#where-do-aws-resources-go","text":"In general, put create new resources in the mofo-projects account. The exception to this rule is if the new resource needs to be in the legacy account (mofo-everything) to access an existing resource in that account (i.e. IAM stored certificates in mofo-everything are only available to resources in that account)","title":"Where do AWS resources go?"},{"location":"devops/aws/#useful-tools","text":"AWS CLI Interface with your AWS resources using a terminal emulator! aws-shell Interactive shell for working with AWS. Autocomplete commands and resources, inline documentation. What more could you want. Assume AWS Role A helper script for assuming new AWS Roles for when working with multiple accounts. Logentries Log aggregation service. Lets you view, search and analyze server logs in real time. Use for debugging issues in staging and production.","title":"Useful Tools"},{"location":"devops/aws/deploy-heroku/","text":"How to Setup a Heroku App with Cloudfront Assuming you have created your heroku app and have the link ready e.g. (appname.herokuapp.com) Create Cloudfront Distribution Open cloudfront and hit Create Distribution In this case we are going to click Get Started on create web distribution. Fill in the blank for Origin Settings section . 3.1 Origin Domain Name: This should be your heroku URL (appname.herokuapp.com) 3.2 Origin Path: This should be your base route for example: appname.herokuapp.com/home then this should be /home 3.3 Origin ID: This will be auto generated. 3.4 Origin Custom Headers: Use this to pass custom HTTP Headers from CloudFront to your origin server Fill in the blank for Default Cache Behavior Settings . 4.1 Viewer Protocol Policy: Redirect HTTP to HTTPS if you need this to be on HTTPS 4.2 Allowed HTTP Methods: Leave it GET, HEAD unless you need other METHODS. NOTE: leave other part as default in this section unless you need something custom Fill in the blank for Distribution Settings 5.1 Alternate Domain Names (CNAMEs): This should be your Route53 domain name for example: appname.mofostaging.net 5.2 SSL Certificate: You would probably want Custom SSL Certificate (example.com): . Select the one that matches your Route53 domain. The rest can be left as default, and hit Create Distribution Create Route53 Open Hosted zone Click Create Hosted Zone or open an existing domain in the list. Create new record by clicking on Create Record Set On the right sidebar fill in these fields: 4.1 Name: this will be your subdomain name (appname.mofostaging.net) would be appname 4.2 Type: A - IPv4 address record in the case of Cloudfront distribution 4.3 Alias: Yes 4.4 Alias Target: This will be cloudfront distribution URL (you can obtain this by going to the list in cloudfront tab and click on your distribution and find it under Domain Name ). 4.5 Click Create","title":"Deploy heroku"},{"location":"devops/aws/deploy-heroku/#how-to-setup-a-heroku-app-with-cloudfront","text":"Assuming you have created your heroku app and have the link ready e.g. (appname.herokuapp.com)","title":"How to Setup a Heroku App with Cloudfront"},{"location":"devops/aws/deploy-heroku/#create-cloudfront-distribution","text":"Open cloudfront and hit Create Distribution In this case we are going to click Get Started on create web distribution. Fill in the blank for Origin Settings section . 3.1 Origin Domain Name: This should be your heroku URL (appname.herokuapp.com) 3.2 Origin Path: This should be your base route for example: appname.herokuapp.com/home then this should be /home 3.3 Origin ID: This will be auto generated. 3.4 Origin Custom Headers: Use this to pass custom HTTP Headers from CloudFront to your origin server Fill in the blank for Default Cache Behavior Settings . 4.1 Viewer Protocol Policy: Redirect HTTP to HTTPS if you need this to be on HTTPS 4.2 Allowed HTTP Methods: Leave it GET, HEAD unless you need other METHODS. NOTE: leave other part as default in this section unless you need something custom Fill in the blank for Distribution Settings 5.1 Alternate Domain Names (CNAMEs): This should be your Route53 domain name for example: appname.mofostaging.net 5.2 SSL Certificate: You would probably want Custom SSL Certificate (example.com): . Select the one that matches your Route53 domain. The rest can be left as default, and hit Create Distribution","title":"Create Cloudfront Distribution"},{"location":"devops/aws/deploy-heroku/#create-route53","text":"Open Hosted zone Click Create Hosted Zone or open an existing domain in the list. Create new record by clicking on Create Record Set On the right sidebar fill in these fields: 4.1 Name: this will be your subdomain name (appname.mofostaging.net) would be appname 4.2 Type: A - IPv4 address record in the case of Cloudfront distribution 4.3 Alias: Yes 4.4 Alias Target: This will be cloudfront distribution URL (you can obtain this by going to the list in cloudfront tab and click on your distribution and find it under Domain Name ). 4.5 Click Create","title":"Create Route53"},{"location":"devops/aws/deploy-s3/","text":"Setup an Application using Simple Storage Service (S3) This document explains how to setup an application that does not need a server to be running i.e. is a static application, for e.g. static websites. Services Used S3 CloudFront Route 53 Steps Setting up the S3 Bucket Role : Switch to the appropriate role in which the content for the application needs to exist in. Create Bucket : Click on the \"Create Bucket\" button in S3, give your bucket a name and select \"US Standard\" as the region. Upload Content : Click on \"Upload\" and drag and drop your files into the bucket. Setup Hosting : Next you need to setup hosting for the application. Here's how you do it: Select the \"Properties\" tab and expand the \"Static Website Hosting\" section. Select \"Enable website hosting\" and type in your application entry-point (Index Document) and the default error page you would like to show (set it to the same value of the Index Document if you don't have a custom error page). Click \"Save\". You should now see an \"Endpoint\" url that you can access your bucket's contents at. However, this url won't be accessible until you setup permissions for the bucket as described in the next step. Permissions : Adequate permissions need to be set on the bucket to enable access to it. The steps for this are: Expand the \"Permissions\" section in the \"Properties\" tab. Select \"Add Bucket Policy\" and click on the \"AWS Policy Generator\" link in the bottom-left corner. This will open a new window/tab with the Policy Generator page. In the Policy Generator page: Select the \"Policy Type\" as \"S3 Bucket Policy\". Set the \"Principal\" based on who you would like to allow access to the bucket. Set it to \"*\" (without quotes) to allow access to everyone. For the \"Action\", you will need to at least select the \"GetObject\" permission. If you want to allow uploads to the S3 bucket from anywhere outside AWS, you should also enable the \"PutObject\" permission. CAUTION: Do not set the \"Principal\" as \"*\" if you are enabling the \"PutObject\" option. If you need to allow uploading content to the bucket, only allow the \"GetObject\" action on the bucket, create an IAM user, generate a policy that allows \"PutObject\" for that user, and use its secret key to upload content. For the \"ARN\" set it to your bucket ARN which will look something like arn:aws:s3:::<bucket_name>/* Click on \"Add Statement\" and then \"Generate Policy\". A JSON document is created for you. Copy the text from there. Paste the JSON permission object into the text area back in the \"Add Bucket Policy\" dialog in the previous page and click \"Save\". Verify that you can now access the bucket's content by using the url seen in the \"Static Website Hosting\" section. Your S3 bucket should now be setup correctly. Setting up a CloudFront distribution Once you have your S3 bucket set up, you need to add a CloudFront CDN to serve the bucket's content effectively. The steps for doing so are as follows: Role : Before proceeding, make sure you switch to the appropriate role so that the CloudFront distribution being created is in the same account which contains the SSL certificate you would like to use. Create distribution : Select \"Create Distribution\" from the CloudFront page and then select \"Get Started\" under the \"Web\" section as the delivery method. Configuration : Fill out the fields as follows: The \"Origin Domain Name\" will be the publicly accessible url for the S3 bucket created above. If the \"Origin Protocol Policy\" exists, set it to \"HTTP Only\". Set the \"Viewer Protocol Policy\" to \"Redirect HTTP to HTTPS\" so that SSL is always used. If you are setting up a custom domain for the application, add it to the \"Alternate Domain Names\" text field. For the basic configuration, the rest of the fields can be left as their default values. Otherwise, you will need to customize some of the other fields (for example, if you do some kind of query string parsing in your application, you might want to enable the \"Forward Query Strings\" option). Verification : Select \"Create distribution\" to finish the process. The process of creating the distribution can take up to 20 minutes. Once it is completed, verify that you can access contents through CloudFront by accessing the domain name as seen in the \"General\" tab when you click on your distribution from the list. Setting up a custom domain using Route 53 This step is only needed if you need to set a custom domain to access the contents of you website instead of using the CloudFront distribution's url. The assumption here is that the domain name is already in possession by Mozilla. Navigate : Head to Route 53 and select \"Hosted Zones\" from the sidebar. Create domain : If your domain does not exist in the list, select \"Create Hosted Zone\", type in your domain name and click \"Create\". If your domain already exists in the list, click on it and skip to step 4. Setup Name Servers : Click on your domain and then select \"Create Record Set\". Leave the \"Name\" blank and select \"Name Server\" as the type. Set the name server values in the \"Values\" field. Click \"Create\". Connect CloudFront : Select \"Create Record Set\". If your custom domain is actually a subdomain, type that into the \"Name\" field. Select the type as \"Alias\", check \"Yes\" for the \"Alias\" option and then type in the CloudFront distribution's url into the \"Alias Target\" field. Click on \"Create\" to complete the process. Verification : You should now be able to access your S3 bucket contents through your custom domain name.","title":"Setup an Application using Simple Storage Service (S3)"},{"location":"devops/aws/deploy-s3/#setup-an-application-using-simple-storage-service-s3","text":"This document explains how to setup an application that does not need a server to be running i.e. is a static application, for e.g. static websites.","title":"Setup an Application using Simple Storage Service (S3)"},{"location":"devops/aws/deploy-s3/#services-used","text":"S3 CloudFront Route 53","title":"Services Used"},{"location":"devops/aws/deploy-s3/#steps","text":"","title":"Steps"},{"location":"devops/aws/deploy-s3/#setting-up-the-s3-bucket","text":"Role : Switch to the appropriate role in which the content for the application needs to exist in. Create Bucket : Click on the \"Create Bucket\" button in S3, give your bucket a name and select \"US Standard\" as the region. Upload Content : Click on \"Upload\" and drag and drop your files into the bucket. Setup Hosting : Next you need to setup hosting for the application. Here's how you do it: Select the \"Properties\" tab and expand the \"Static Website Hosting\" section. Select \"Enable website hosting\" and type in your application entry-point (Index Document) and the default error page you would like to show (set it to the same value of the Index Document if you don't have a custom error page). Click \"Save\". You should now see an \"Endpoint\" url that you can access your bucket's contents at. However, this url won't be accessible until you setup permissions for the bucket as described in the next step. Permissions : Adequate permissions need to be set on the bucket to enable access to it. The steps for this are: Expand the \"Permissions\" section in the \"Properties\" tab. Select \"Add Bucket Policy\" and click on the \"AWS Policy Generator\" link in the bottom-left corner. This will open a new window/tab with the Policy Generator page. In the Policy Generator page: Select the \"Policy Type\" as \"S3 Bucket Policy\". Set the \"Principal\" based on who you would like to allow access to the bucket. Set it to \"*\" (without quotes) to allow access to everyone. For the \"Action\", you will need to at least select the \"GetObject\" permission. If you want to allow uploads to the S3 bucket from anywhere outside AWS, you should also enable the \"PutObject\" permission. CAUTION: Do not set the \"Principal\" as \"*\" if you are enabling the \"PutObject\" option. If you need to allow uploading content to the bucket, only allow the \"GetObject\" action on the bucket, create an IAM user, generate a policy that allows \"PutObject\" for that user, and use its secret key to upload content. For the \"ARN\" set it to your bucket ARN which will look something like arn:aws:s3:::<bucket_name>/* Click on \"Add Statement\" and then \"Generate Policy\". A JSON document is created for you. Copy the text from there. Paste the JSON permission object into the text area back in the \"Add Bucket Policy\" dialog in the previous page and click \"Save\". Verify that you can now access the bucket's content by using the url seen in the \"Static Website Hosting\" section. Your S3 bucket should now be setup correctly.","title":"Setting up the S3 Bucket"},{"location":"devops/aws/deploy-s3/#setting-up-a-cloudfront-distribution","text":"Once you have your S3 bucket set up, you need to add a CloudFront CDN to serve the bucket's content effectively. The steps for doing so are as follows: Role : Before proceeding, make sure you switch to the appropriate role so that the CloudFront distribution being created is in the same account which contains the SSL certificate you would like to use. Create distribution : Select \"Create Distribution\" from the CloudFront page and then select \"Get Started\" under the \"Web\" section as the delivery method. Configuration : Fill out the fields as follows: The \"Origin Domain Name\" will be the publicly accessible url for the S3 bucket created above. If the \"Origin Protocol Policy\" exists, set it to \"HTTP Only\". Set the \"Viewer Protocol Policy\" to \"Redirect HTTP to HTTPS\" so that SSL is always used. If you are setting up a custom domain for the application, add it to the \"Alternate Domain Names\" text field. For the basic configuration, the rest of the fields can be left as their default values. Otherwise, you will need to customize some of the other fields (for example, if you do some kind of query string parsing in your application, you might want to enable the \"Forward Query Strings\" option). Verification : Select \"Create distribution\" to finish the process. The process of creating the distribution can take up to 20 minutes. Once it is completed, verify that you can access contents through CloudFront by accessing the domain name as seen in the \"General\" tab when you click on your distribution from the list.","title":"Setting up a CloudFront distribution"},{"location":"devops/aws/deploy-s3/#setting-up-a-custom-domain-using-route-53","text":"This step is only needed if you need to set a custom domain to access the contents of you website instead of using the CloudFront distribution's url. The assumption here is that the domain name is already in possession by Mozilla. Navigate : Head to Route 53 and select \"Hosted Zones\" from the sidebar. Create domain : If your domain does not exist in the list, select \"Create Hosted Zone\", type in your domain name and click \"Create\". If your domain already exists in the list, click on it and skip to step 4. Setup Name Servers : Click on your domain and then select \"Create Record Set\". Leave the \"Name\" blank and select \"Name Server\" as the type. Set the name server values in the \"Values\" field. Click \"Create\". Connect CloudFront : Select \"Create Record Set\". If your custom domain is actually a subdomain, type that into the \"Name\" field. Select the type as \"Alias\", check \"Yes\" for the \"Alias\" option and then type in the CloudFront distribution's url into the \"Alias Target\" field. Click on \"Create\" to complete the process. Verification : You should now be able to access your S3 bucket contents through your custom domain name.","title":"Setting up a custom domain using Route 53"},{"location":"devops/aws/domain-purchasing/","text":"How to purchase a new domain Don't publicly share domain names before we purchase them, the last thing we need is a domain squatter snatching it up before we can. Set up a Hosted Zone in AWS for the new domain Open the AWS console, log in, and assume the role for working in the mofo-projects account Open Route 53 and select \"Hosted Zones\" in the left hand menu area to bring up the list of existing zones. Click the \"Create Hosted Zone\" button on the top left, just above the table of Hosted Zones. Fill in the form Domain Name - enter the domain name of the new zones Comment - optionally enter in a comment or description for the new Zone Type - 99.99% of the time we'll be using \"Public Hosted Zone\" Copy the values in the NS record set of the new Hosted Zone record Purchase the Domain File an IT request (requires a valid session using a mozilla employee account) Select the urgency, based on the situation. No rush, or within the next week are the best options in most cases. Select \"Report a problem with a Mozilla website, or to request a change or push\" Enter a bug summary - i.e. \"Purchase furrykittens.net\" Describe the reason for the domain purchase, provide a relevant link if possible. Provide the NS record set values that were created in the new Hosted Zone you set up. Submit and reward yourself with an ice cold beverage of your choice.","title":"Domain purchasing"},{"location":"devops/aws/domain-purchasing/#how-to-purchase-a-new-domain","text":"Don't publicly share domain names before we purchase them, the last thing we need is a domain squatter snatching it up before we can.","title":"How to purchase a new domain"},{"location":"devops/aws/domain-purchasing/#set-up-a-hosted-zone-in-aws-for-the-new-domain","text":"Open the AWS console, log in, and assume the role for working in the mofo-projects account Open Route 53 and select \"Hosted Zones\" in the left hand menu area to bring up the list of existing zones. Click the \"Create Hosted Zone\" button on the top left, just above the table of Hosted Zones. Fill in the form Domain Name - enter the domain name of the new zones Comment - optionally enter in a comment or description for the new Zone Type - 99.99% of the time we'll be using \"Public Hosted Zone\" Copy the values in the NS record set of the new Hosted Zone record","title":"Set up a Hosted Zone in AWS for the new domain"},{"location":"devops/aws/domain-purchasing/#purchase-the-domain","text":"File an IT request (requires a valid session using a mozilla employee account) Select the urgency, based on the situation. No rush, or within the next week are the best options in most cases. Select \"Report a problem with a Mozilla website, or to request a change or push\" Enter a bug summary - i.e. \"Purchase furrykittens.net\" Describe the reason for the domain purchase, provide a relevant link if possible. Provide the NS record set values that were created in the new Hosted Zone you set up. Submit and reward yourself with an ice cold beverage of your choice.","title":"Purchase the Domain"},{"location":"devops/aws/ssl-certificate-management/","text":"SSL Certificate Management This guide contains information about generating keys and Certificate Signing Requests (CSRs), submitting them to Digicert, approving them, and deploying them to AWS or Heroku. Obtaining a new certificate Grab the helper script from this repo. run ./generate-ssl-cert fuzzykittens.org . grab the CSR: cat fuzzykittens.org/fuzzy_kittens_org.csr . Log into Digicert, and go the the \"Request Cert\" page. Select \"SSL Certificate\" as product type, if not already selected. Paste the CSR into the text area provided. The Common Name should automatically populate. Make sure it's correct. If you need other hostnames for the cert, such as \"www.fuzzykittens.org\" enter it under the \"Other Hostnames (SANs)\" section. Select Mozilla Foundation as the Organization. Only select Extended Validation if required. If you don't know, Ask Chris or Simon. Select Apache as the Server Platform. Select 1 Year for Validity period. Select auto-renew, it's helpful Under \"Order Access\", find Chris De Cairos and check the box. Don't worry about the input area for additional emails about renewals. Add in any relevant comments (links, explainations etc.) to the \"Comments to Administrator\" field Agree to the TOS presented at the bottom of the form. Or don't. depends how badly you need that cert! Submit the Certificate Request. Chris, and possibly you (TBD), will receive an email asking to confirm the request. It should contain a link to the request on the Digicert website, where you should select the approval button. The signed certificate for the domain will be emailed to you! extract the contents of the attachment to the same directory we created the key and CSR in. Install the certificate On AWS Ensure you've configured the AWS cli for your machine Install & configure the assume-aws-role helper Grab the helper script Navigate to the directory where your certificate and secret is. Assume the role of the account you need the certificate to reside in. assume-aws-role mofo-projects 123456 Execute the helper script & follow the instructions: /path/to/helper/iam-upload-cert It will give you the Certificate ID that you can use to configure resources in the account that need it (i.e. load balancers or Cloudfront Distributions) On Heroku Enable the SNI beta! heroku labs:enable http-sni -a fuzzy-kittens Add the cert: heroku _certs:add /path/to/cert/fuzzy_kittens.crt /path/to/cert/fuzzy_kittens.key --type sni Select the domain to configure with a heroku SSL domain (see on screen display from the Heroku CLI) Grab the Heroku SSL domain (should look like www.fuzzykittens.org.herokudns.com ) Update the Hosted Zone in AWS for that domain with a CNAME record that resolves to that Heroku domain.","title":"Ssl certificate management"},{"location":"devops/aws/ssl-certificate-management/#ssl-certificate-management","text":"This guide contains information about generating keys and Certificate Signing Requests (CSRs), submitting them to Digicert, approving them, and deploying them to AWS or Heroku.","title":"SSL Certificate Management"},{"location":"devops/aws/ssl-certificate-management/#obtaining-a-new-certificate","text":"Grab the helper script from this repo. run ./generate-ssl-cert fuzzykittens.org . grab the CSR: cat fuzzykittens.org/fuzzy_kittens_org.csr . Log into Digicert, and go the the \"Request Cert\" page. Select \"SSL Certificate\" as product type, if not already selected. Paste the CSR into the text area provided. The Common Name should automatically populate. Make sure it's correct. If you need other hostnames for the cert, such as \"www.fuzzykittens.org\" enter it under the \"Other Hostnames (SANs)\" section. Select Mozilla Foundation as the Organization. Only select Extended Validation if required. If you don't know, Ask Chris or Simon. Select Apache as the Server Platform. Select 1 Year for Validity period. Select auto-renew, it's helpful Under \"Order Access\", find Chris De Cairos and check the box. Don't worry about the input area for additional emails about renewals. Add in any relevant comments (links, explainations etc.) to the \"Comments to Administrator\" field Agree to the TOS presented at the bottom of the form. Or don't. depends how badly you need that cert! Submit the Certificate Request. Chris, and possibly you (TBD), will receive an email asking to confirm the request. It should contain a link to the request on the Digicert website, where you should select the approval button. The signed certificate for the domain will be emailed to you! extract the contents of the attachment to the same directory we created the key and CSR in.","title":"Obtaining a new certificate"},{"location":"devops/aws/ssl-certificate-management/#install-the-certificate","text":"","title":"Install the certificate"},{"location":"devops/aws/ssl-certificate-management/#on-aws","text":"Ensure you've configured the AWS cli for your machine Install & configure the assume-aws-role helper Grab the helper script Navigate to the directory where your certificate and secret is. Assume the role of the account you need the certificate to reside in. assume-aws-role mofo-projects 123456 Execute the helper script & follow the instructions: /path/to/helper/iam-upload-cert It will give you the Certificate ID that you can use to configure resources in the account that need it (i.e. load balancers or Cloudfront Distributions)","title":"On AWS"},{"location":"devops/aws/ssl-certificate-management/#on-heroku","text":"Enable the SNI beta! heroku labs:enable http-sni -a fuzzy-kittens Add the cert: heroku _certs:add /path/to/cert/fuzzy_kittens.crt /path/to/cert/fuzzy_kittens.key --type sni Select the domain to configure with a heroku SSL domain (see on screen display from the Heroku CLI) Grab the Heroku SSL domain (should look like www.fuzzykittens.org.herokudns.com ) Update the Hosted Zone in AWS for that domain with a CNAME record that resolves to that Heroku domain.","title":"On Heroku"},{"location":"playbooks/projects/","text":"How we plan large projects Projects that take 1 or more sprints require: (stakeholder) Project outline submitted to Airtable (stakeholder, engineering) Someone from the Engagement team and someone with knowledge of the system affected conducting a stakeholder interview (stakeholder, engineering) Assigning a dedicated slack channel for all participants to join, to ensure common knowledge (engineering) The project is tracked by way of an initial spike to determine all the work involved, (engineering) Implementation plan from the spike is turned into concrete tasks, with issues filed for each task, and each issue's load estimated in terms of rough hours required to do the work. (engineering) We set up a feature branch for the work so that development doesn't hold up, or potentially break, the live site, with a dedicated heroku app so that we auto-deploy feature branch work. (engineering) Three deadlines are established: (engineering) confidence deadline (optional): which is used to guage whether the internal deadline can be met. There should always be enough time between the confidence deadline and internal deadline that a decision to postpone can safely be made. (engineering) internal deadline: a soft-launch date, by which all the work is done (stakeholder, engineering) diamond deadline: the public facing deadline for when the work is live and ready for users","title":"How we plan large projects"},{"location":"playbooks/projects/#how-we-plan-large-projects","text":"Projects that take 1 or more sprints require: (stakeholder) Project outline submitted to Airtable (stakeholder, engineering) Someone from the Engagement team and someone with knowledge of the system affected conducting a stakeholder interview (stakeholder, engineering) Assigning a dedicated slack channel for all participants to join, to ensure common knowledge (engineering) The project is tracked by way of an initial spike to determine all the work involved, (engineering) Implementation plan from the spike is turned into concrete tasks, with issues filed for each task, and each issue's load estimated in terms of rough hours required to do the work. (engineering) We set up a feature branch for the work so that development doesn't hold up, or potentially break, the live site, with a dedicated heroku app so that we auto-deploy feature branch work. (engineering) Three deadlines are established: (engineering) confidence deadline (optional): which is used to guage whether the internal deadline can be met. There should always be enough time between the confidence deadline and internal deadline that a decision to postpone can safely be made. (engineering) internal deadline: a soft-launch date, by which all the work is done (stakeholder, engineering) diamond deadline: the public facing deadline for when the work is live and ready for users","title":"How we plan large projects"},{"location":"playbooks/sprints/","text":"How we plan regular sprints Our sprints take 2 weeks, starting with sprint planning on tuesdays the monday before sprint planning has a sprint retrospective. sprint planning any outstanding work from last sprint gets moved to new sprint last sprint's stretch goals are evaluated and either moved into the new sprint or pushed out sprints are a mix of new work and maintenance/tech debt","title":"How we plan regular sprints"},{"location":"playbooks/sprints/#how-we-plan-regular-sprints","text":"Our sprints take 2 weeks, starting with sprint planning on tuesdays the monday before sprint planning has a sprint retrospective.","title":"How we plan regular sprints"},{"location":"playbooks/sprints/#sprint-planning","text":"any outstanding work from last sprint gets moved to new sprint last sprint's stretch goals are evaluated and either moved into the new sprint or pushed out sprints are a mix of new work and maintenance/tech debt","title":"sprint planning"},{"location":"tech/backend/","text":"Backend technologies used in our repos foundation.mozilla.org and mozillafestival.org Docker for abstraction as a replacement for virtual environments. Docker and Docker Compose are actively used. Invoke for managing tasks inside of Docker such as running migrations. Python as the preferred backend language. Python is installed when you run the Invoke command: inv new-env Django Web Framework as the backend framework. Django is installed when you run the Invoke command: inv new-env . Wagtail CMS as the content management system. Wagtail is installed when you run the Invoke command: inv new-env","title":"Backend technologies used in our repos"},{"location":"tech/backend/#backend-technologies-used-in-our-repos","text":"","title":"Backend technologies used in our repos"},{"location":"tech/backend/#foundationmozillaorg-and-mozillafestivalorg","text":"Docker for abstraction as a replacement for virtual environments. Docker and Docker Compose are actively used. Invoke for managing tasks inside of Docker such as running migrations. Python as the preferred backend language. Python is installed when you run the Invoke command: inv new-env Django Web Framework as the backend framework. Django is installed when you run the Invoke command: inv new-env . Wagtail CMS as the content management system. Wagtail is installed when you run the Invoke command: inv new-env","title":"foundation.mozilla.org and mozillafestival.org"},{"location":"tech/ci-cd/","text":"Continuous Integration and Continuous Development CI: github actions ...txt goes here... notes: third party github actions must be requested by filing a bugzilla bug, see the ticket template here . CD: Heroku ...txt goes here... notes: ...","title":"Continuous Integration and Continuous Development"},{"location":"tech/ci-cd/#continuous-integration-and-continuous-development","text":"","title":"Continuous Integration and Continuous Development"},{"location":"tech/ci-cd/#ci-github-actions","text":"...txt goes here... notes: third party github actions must be requested by filing a bugzilla bug, see the ticket template here .","title":"CI: github actions"},{"location":"tech/ci-cd/#cd-heroku","text":"...txt goes here... notes: ...","title":"CD: Heroku"},{"location":"tech/frontend/","text":"Frontend technologies used in our repos foundation.mozilla.org and mozillafestival.org Note: Each of these are installed inside of your Docker container. esbuild for compiling SASS and JavaScript as a faster replacement for webpack Prettier for frontend code formatting Bootstrap as the frontend framework React.js and jQuery for writing JavaScript SASS for writing maintainable CSS","title":"Frontend technologies used in our repos"},{"location":"tech/frontend/#frontend-technologies-used-in-our-repos","text":"","title":"Frontend technologies used in our repos"},{"location":"tech/frontend/#foundationmozillaorg-and-mozillafestivalorg","text":"Note: Each of these are installed inside of your Docker container. esbuild for compiling SASS and JavaScript as a faster replacement for webpack Prettier for frontend code formatting Bootstrap as the frontend framework React.js and jQuery for writing JavaScript SASS for writing maintainable CSS","title":"foundation.mozilla.org and mozillafestival.org"}]}